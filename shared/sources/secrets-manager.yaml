---
apiVersion: v1
kind: Namespace
metadata:
  name: secret-sync
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-sync
  namespace: secret-sync
---
# RBAC: read ONLY the source secret in flux-system
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-acr-auth
  namespace: flux-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["acr-auth"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync-read-acr-auth
  namespace: flux-system
subjects:
  - kind: ServiceAccount
    name: secret-sync
    namespace: secret-sync
roleRef:
  kind: Role
  name: read-acr-auth
  apiGroup: rbac.authorization.k8s.io
---
# RBAC: write the target secret in dev
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: write-acr-auth
  namespace: dev
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["acr-auth"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync-write-acr-auth
  namespace: dev
subjects:
  - kind: ServiceAccount
    name: secret-sync
    namespace: secret-sync
roleRef:
  kind: Role
  name: write-acr-auth
  apiGroup: rbac.authorization.k8s.io
---
# RBAC: write the target secret in loadtest
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: write-acr-auth
  namespace: loadtest
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["acr-auth"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-sync-write-acr-auth
  namespace: loadtest
subjects:
  - kind: ServiceAccount
    name: secret-sync
    namespace: secret-sync
roleRef:
  kind: Role
  name: write-acr-auth
  apiGroup: rbac.authorization.k8s.io
---
# Copy script (no external deps, uses kubectl only)
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-sync-script
  namespace: secret-sync
data:
  sync.sh: |
    #!/bin/sh
    set -eu

    SOURCE_NS="flux-system"
    SECRET_NAME="acr-auth"
    TARGETS="dev loadtest"

    # Ensure source secret exists
    if ! kubectl -n "${SOURCE_NS}" get secret "${SECRET_NAME}" >/dev/null 2>&1; then
      echo "[ERROR] ${SOURCE_NS}/${SECRET_NAME} not found"
      exit 1
    fi

    TYPE=$(kubectl -n "${SOURCE_NS}" get secret "${SECRET_NAME}" -o jsonpath='{.type}')
    DATA_BLOCK=$(kubectl -n "${SOURCE_NS}" get secret "${SECRET_NAME}" -o go-template='{{range $k,$v := .data}}{{printf "  %s: %s\n" $k $v}}{{end}}')

    for NS in ${TARGETS}; do
      echo "[INFO] Syncing to namespace: ${NS}"
      cat > /tmp/secret.yaml <<EOF
    apiVersion: v1
    kind: Secret
    metadata:
      name: ${SECRET_NAME}
      namespace: ${NS}
    type: ${TYPE}
    data:
    ${DATA_BLOCK}
    EOF
      # Create or update
      kubectl apply -f /tmp/secret.yaml
    done

    echo "[INFO] Done."
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-sync-acr-auth
  namespace: secret-sync
spec:
  # Run hourly; adjust as desired (e.g., "*/10 * * * *" for every 10 minutes)
  schedule: "*/2 * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-sync
          restartPolicy: OnFailure
          containers:
            - name: sync
              image: bitnami/kubectl:latest
              command: ["/bin/sh","-c"]
              args: ["chmod +x /scripts/sync.sh && /scripts/sync.sh"]
              volumeMounts:
                - name: script
                  mountPath: /scripts
          volumes:
            - name: script
              configMap:
                name: secret-sync-script
                defaultMode: 0755
